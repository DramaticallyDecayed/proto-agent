# baseURI: http://dd.com/SASKBTest
# imports: http://spinrdf.org/sp
# imports: http://spinrdf.org/spl
# imports: http://topbraid.org/sparqlmotionfunctions

@prefix : <http://dd.com/SASKBTest#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix unnamed: <http://example.org/unnamed#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://dd.com/SASKBTest>
  rdf:type owl:Ontology ;
  owl:imports <http://spinrdf.org/sp> ;
  owl:imports <http://spinrdf.org/spl> ;
  owl:imports <http://topbraid.org/sparqlmotionfunctions> ;
  owl:versionInfo "Created with TopBraid Composer"^^xsd:string ;
.
:BodyState
  rdf:type owl:Class ;
  rdfs:subClassOf :ModelClass ;
.
:CalculationDependency
  rdf:type owl:Class ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object :Node ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "bc"^^xsd:string ;
              ] ;
            sp:predicate :base ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "d"^^xsd:string ;
              ] ;
            sp:predicate :derivative ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:SubQuery ;
            sp:query [
                rdf:type sp:Select ;
                sp:resultVariables (
                    [
                      sp:varName "calc"^^xsd:string ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object :ModelClass ;
                      sp:predicate rdfs:subClassOf ;
                      sp:subject [
                          sp:varName "c"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Filter ;
                      sp:expression [
                          rdf:type sp:exists ;
                          sp:elements (
                              [
                                sp:object [
                                    sp:varName "c"^^xsd:string ;
                                  ] ;
                                sp:predicate rdf:type ;
                                sp:subject [
                                    sp:varName "i"^^xsd:string ;
                                  ] ;
                              ]
                            ) ;
                        ] ;
                    ]
                    [
                      sp:object :CalculationDependency ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "calc"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "c"^^xsd:string ;
                        ] ;
                      sp:predicate :base ;
                      sp:subject [
                          sp:varName "calc"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Filter ;
                      sp:expression [
                          rdf:type sp:not ;
                          sp:arg1 [
                              rdf:type :test ;
                              sp:arg1 [
                                  sp:varName "calc"^^xsd:string ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "bc"^^xsd:string ;
              ] ;
            sp:predicate :base ;
            sp:subject [
                sp:varName "calc"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "d"^^xsd:string ;
              ] ;
            sp:predicate :derivative ;
            sp:subject [
                sp:varName "calc"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "bc"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "bi"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type afn:namespace ;
                sp:arg1 [
                    sp:varName "bc"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ns"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type fn:concat ;
                    sp:arg1 [
                        sp:varName "ns"^^xsd:string ;
                      ] ;
                    sp:arg2 [
                        rdf:type fn:concat ;
                        sp:arg1 "node_" ;
                        sp:arg2 [
                            rdf:type afn:localname ;
                            sp:arg1 [
                                sp:varName "calc"^^xsd:string ;
                              ] ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object :Node ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "en"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "bc"^^xsd:string ;
                        ] ;
                      sp:predicate :base ;
                      sp:subject [
                          sp:varName "en"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:subClassOf :CamputabilityClass ;
.
:CalculationDependency_1
  rdf:type :CalculationDependency ;
  :base :BodyState ;
  :derivative :EgoState ;
.
:CalculationDependency_2
  rdf:type :CalculationDependency ;
  :base :EgoState ;
  :base :NavigatingLandmark ;
  :derivative :EgoAbsState ;
.
:CamputabilityClass
  rdf:type owl:Class ;
  rdfs:subClassOf owl:Thing ;
.
:EgoAbsState
  rdf:type owl:Class ;
  rdfs:subClassOf :ModelClass ;
.
:EgoState
  rdf:type owl:Class ;
  rdfs:subClassOf :ModelClass ;
.
:ModelClass
  rdf:type owl:Class ;
  rdfs:subClassOf owl:Thing ;
.
:NavigatingLandmark
  rdf:type owl:Class ;
  rdfs:subClassOf :ModelClass ;
.
:Node
  rdf:type owl:Class ;
  rdfs:subClassOf :CamputabilityClass ;
.
:base
  rdf:type owl:ObjectProperty ;
  rdfs:domain :CamputabilityClass ;
  rdfs:range :ModelClass ;
.
:derivative
  rdf:type owl:ObjectProperty ;
  rdfs:domain :CamputabilityClass ;
  rdfs:range :ModelClass ;
.
:test
  rdf:type spin:Function ;
  spin:body [
      rdf:type sp:Ask ;
      sp:where (
          [
            sp:object :ModelClass ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "nc"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "nc"^^xsd:string ;
                        ] ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "ni"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nc"^^xsd:string ;
              ] ;
            sp:predicate :base ;
            sp:subject spin:_arg1 ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType :CalculationDependency ;
  rdfs:subClassOf spin:Functions ;
.
